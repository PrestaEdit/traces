#!/usr/bin/env php
<?php
/**
 * A simple CLI tool to generate information about GitHub contributors of a repository.
 *
 * @author PrestaShop SA <contact@prestashop.com>
 */

function includeIfExists($file)
{
    if (file_exists($file)) {
        return include $file;
    }
}

if ((!$loader = includeIfExists(__DIR__ . '/vendor/autoload.php')) && (!$loader = includeIfExists(
        __DIR__ . '/../../autoload.php'
    ))) {
    die(
        'You must set up the project dependencies, run the following commands:' . PHP_EOL .
        'curl -sS https://getcomposer.org/installer | php' . PHP_EOL .
        'php composer.phar install' . PHP_EOL
    );
}

use GuzzleHttp\Client;
use Symfony\Component\Yaml\Yaml;
use Symfony\Component\Console\Application;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Style\SymfonyStyle;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;

const GITHUB_PULLS_POINT = 'https://api.github.com/repos/{repository}/pulls';
const GITHUB_CONTRIBUTORS_POINT = 'https://api.github.com/repos/{repository}/contributors';
const GITHUB_REPOSITORIES_POINT = 'https://api.github.com/orgs/{organization}/repos';
const GITHUB_USERS_POINT = 'https://api.github.com/users/{login}';
const REGEX = '/=([[:digit:]]+)>; rel="last"/';
const REPOSITORIES_CATEGORIES = [
    'core' => [
        'PrestaShop/PrestaShop',
        'PrestaShop/prestashop-icon-font',
        'PrestaShop/smarty',
        'PrestaShop/prestashop-ui-kit',
        'PrestaShop/TranslationToolsBundle',
        'PrestaShop/LocalizationFiles',
        'PrestaShop/stylelint-config',
        'PrestaShop/stylelint-browser-compatibility',
        'PrestaShop/jquery.live-polyfill',
        'PrestaShop/circuit-breaker',
        'PrestaShop/eslint-config',
        'PrestaShop/php-dev-tools',
        'PrestaShop/TranslationFiles',
        'PrestaShop/decimal',
        'PrestaShop/php-ps-info',
    ],
    'specs' => [
        'PrestaShop/prestashop-specs',
    ],
    'documentation' => [
        'PrestaShop/paymentexample',
        'PrestaShop/docs',
        'PrestaShop/user-documentation-en',
        'PrestaShop/user-documentation-fr',
        'PrestaShop/user-documentation-es',
        'PrestaShop/user-documentation-it',
        'PrestaShop/user-documentation-nl',
        'PrestaShop/user-documentation-fa',
        'PrestaShop/ADR',
        'PrestaShop/test-scenarios',
        'PrestaShop/example-modules',
        'PrestaShop/prestashop-retro',
        'PrestaShop/open-source',
        'PrestaShop/example_module_mailtheme',
        'PrestaShop/childtheme-example',
        'PrestaShop/module-companion',
    ],
    'themes' => [
        'PrestaShop/classic-theme',
        'PrestaShop/theme-refacto',
        'PrestaShop/community-theme-16',
    ],
    'modules' => [
        'PrestaShop/PrestaShop-modules',
        'PrestaShop/blockcontactinfos',
        'PrestaShop/blockfacebook',
        'PrestaShop/blocklink',
        'PrestaShop/blockmyaccountfooter',
        'PrestaShop/blockpaymentlogo',
        'PrestaShop/blockpermanentlinks',
        'PrestaShop/blocksharefb',
        'PrestaShop/blockstore',
        'PrestaShop/blocktags',
        'PrestaShop/dashactivity',
        'PrestaShop/dashgoals',
        'PrestaShop/dashproducts',
        'PrestaShop/dashtrends',
        'PrestaShop/graphnvd3',
        'PrestaShop/gridhtml',
        'PrestaShop/pagesnotfound',
        'PrestaShop/productpaymentlogos',
        'PrestaShop/sekeywords',
        'PrestaShop/statsbestcategories',
        'PrestaShop/statsbestcustomers',
        'PrestaShop/statsbestmanufacturers',
        'PrestaShop/statsbestproducts',
        'PrestaShop/statsbestsuppliers',
        'PrestaShop/statsbestvouchers',
        'PrestaShop/statscarrier',
        'PrestaShop/statscatalog',
        'PrestaShop/statscheckup',
        'PrestaShop/statsdata',
        'PrestaShop/statsequipment',
        'PrestaShop/statsforecast',
        'PrestaShop/statslive',
        'PrestaShop/statsnewsletter',
        'PrestaShop/statsorigin',
        'PrestaShop/statspersonalinfos',
        'PrestaShop/statsproduct',
        'PrestaShop/statsregistrations',
        'PrestaShop/statssales',
        'PrestaShop/statssearch',
        'PrestaShop/statsstock',
        'PrestaShop/statsvisits',
        'PrestaShop/themeconfigurator',
        'PrestaShop/trackingfront',
        'PrestaShop/vatnumber',
        'PrestaShop/blockwishlist',
        'PrestaShop/carriercompare',
        'PrestaShop/cashondelivery',
        'PrestaShop/dateofdelivery',
        'PrestaShop/editorial',
        'PrestaShop/favoriteproducts',
        'PrestaShop/followup',
        'PrestaShop/gamification',
        'PrestaShop/gapi',
        'PrestaShop/loyalty',
        'PrestaShop/mailalerts',
        'PrestaShop/newsletter',
        'PrestaShop/productcomments',
        'PrestaShop/pscleaner',
        'PrestaShop/referralprogram',
        'PrestaShop/sendtoafriend',
        'PrestaShop/autoupgrade',
        'PrestaShop/watermark',
        'PrestaShop/gsitemap',
        'PrestaShop/ganalytics',
        'PrestaShop/prestafraud',
        'PrestaShop/pssupport',
        'PrestaShop/eurovatgenerator',
        'PrestaShop/securitypatch',
        'PrestaShop/contactform',
        'PrestaShop/welcome',
        'PrestaShop/blockreassurance',
        'PrestaShop/ps_sharebuttons',
        'PrestaShop/ps_socialfollow',
        'PrestaShop/ps_linklist',
        'PrestaShop/ps_customtext',
        'PrestaShop/ps_contactinfo',
        'PrestaShop/ps_emailsubscription',
        'PrestaShop/ps_banner',
        'PrestaShop/ps_featuredproducts',
        'PrestaShop/ps_imageslider',
        'PrestaShop/ps_mainmenu',
        'PrestaShop/ps_customersignin',
        'PrestaShop/ps_categorytree',
        'PrestaShop/ps_legalcompliance',
        'PrestaShop/ps_wirepayment',
        'PrestaShop/ps_shoppingcart',
        'PrestaShop/ps_currencyselector',
        'PrestaShop/ps_languageselector',
        'PrestaShop/ps_facetedsearch',
        'PrestaShop/ps_customeraccountlinks',
        'PrestaShop/ps_searchbar',
        'PrestaShop/ps_checkpayment',
        'PrestaShop/ps_emailalerts',
        'PrestaShop/ps_rssfeed',
        'PrestaShop/ps_bestsellers',
        'PrestaShop/ps_advertising',
        'PrestaShop/ps_brandlist',
        'PrestaShop/ps_categoryproducts',
        'PrestaShop/ps_newproducts',
        'PrestaShop/ps_specials',
        'PrestaShop/ps_supplierlist',
        'PrestaShop/ps_crossselling',
        'PrestaShop/ps_productinfo',
        'PrestaShop/ps_dataprivacy',
        'PrestaShop/ps_cashondelivery',
        'PrestaShop/ps_carriercomparison',
        'PrestaShop/ps_viewedproduct',
        'PrestaShop/ps_feeder',
        'PrestaShop/ps_reminder',
        'PrestaShop/ps_searchbarjqauto',
        'PrestaShop/ps_buybuttonlite',
        'PrestaShop/ps_faviconnotificationbo',
        'PrestaShop/ps_healthcheck',
        'PrestaShop/ps_qualityassurance',
        'PrestaShop/ps_emailgenerator',
        'PrestaShop/pstagger',
        'PrestaShop/ps_emailsmanager',
        'PrestaShop/ps_livetranslation',
        'PrestaShop/ps_googleanalytics',
        'PrestaShop/ps_themecusto',
    ],
    'tools' => [
        'PrestaShop/PrestaShop-webservice-lib',
        'PrestaShop/module-generator',
        'PrestaShop/live-demo-devices',
        'PrestaShop/docker',
        'PrestaShop/docker-ci',
        'PrestaShop/azure-template-performance',
        'PrestaShop/azure-template-high-performance',
        'PrestaShop/azure-template-basic',
        'PrestaShop/docker-internal-images',
        'PrestaShop/docker-templates',
        'PrestaShop/TopContributors',
        'PrestaShop/prestonbot',
        'PrestaShop/issuebot',
        'PrestaShop/traces',
        'PrestaShop/travis-status-board',
        'PrestaShop/prestashop-shop-creator',
        'PrestaShop/mjml-theme-converter',
        'PrestaShop/nightly-board',
        'PrestaShop/github-webhook-parser',
        'PrestaShop/presthubot-ui',
        'PrestaShop/presthubot',
        'PrestaShop/QANightlyResults',
        'PrestaShop/core-weekly-generator',
        'PrestaShop/email-templates-sdk',
        'PrestaShop/fontmanager',
        'PrestaShop/vagrant',
    ],
    'others' => [
        'PrestaShop/prestashop.github.io',
        'PrestaShop/performance-project',
        'PrestaShop/engineering',
        'PrestaShop/.github',
    ]
];

/**
 * Fetch repositories from an organization
 * @param SymfonyStyle $io
 * @param Client $client
 * @param array $authHeaders
 * @param array $excludeRepositories
 * @param string $organization
 * @return array
 */
function fetchOrganizationRepositories(
    SymfonyStyle $io,
    Client $client,
    array $authHeaders,
    array $excludeRepositories,
    string $organization
): array {
    $orgRepositories = [];

    $requestUri = str_replace('{organization}', $organization, GITHUB_REPOSITORIES_POINT);
    $response = $client->get($requestUri, $authHeaders);
    if ($response->getStatusCode() !== 200) {
        return $orgRepositories;
    }

    // Number of pages
    if ($response->hasHeader('Link')) {
        $headerValue = $response->getHeader('Link')[0];
        preg_match(REGEX, $headerValue, $matches);
        $nbPages = $matches[1];
    } else {
        $nbPages = 1;
    }

    // Fetch pages
    $io->progressStart($nbPages);
    for ($i = 1; $i <= $nbPages; $i++) {
        $response = $client->get($requestUri . '?page=' . $i, $authHeaders);
        $repositories = json_decode($response->getBody(), true);
        foreach ($repositories as $repository) {
            if ($repository['private'] || $repository['fork']) {
                continue;
            }
            if (in_array($repository['full_name'], $excludeRepositories)) {
                continue;
            }
            $orgRepositories[] = $repository['full_name'];
        }
        $io->progressAdvance();
    }
    $io->progressFinish();

    return $orgRepositories;
}

/**
 * @param Client $client
 * @param array $authHeaders
 * @param string $repository
 * @return array
 */
function fetchRepositoryPulls(
    Client $client,
    array $authHeaders,
    string $repository
) {
    $contributors = [];
    $requestUri = str_replace('{repository}', $repository, GITHUB_PULLS_POINT);
    $response = $client->get($requestUri . '?per_page=100&state=closed', $authHeaders);
    if ($response->getStatusCode() !== 200) {
        return $contributors;
    }
    if ($response->hasHeader('Link')) {
        $headerValue = $response->getHeader('Link')[0];
        preg_match(REGEX, $headerValue, $matches);
        $nbPages = $matches[1];
    } else {
        $nbPages = 1;
    }

    for ($i = 1; $i <= $nbPages; $i++) {
        $response = $client->get($requestUri . '?state=closed&per_page=100&page=' . $i, $authHeaders);
        $pulls = json_decode($response->getBody(), false);
        foreach ($pulls as $pull) {
            if ($pull->merged_at !== null) {
                if (!isset($contributors[$pull->user->login])) {
                    $contributors[$pull->user->login] = [
                        'login' => $pull->user->login,
                        'contributions' => 0,
                    ];
                }

                $contributors[$pull->user->login]['contributions']++;
            }
        }
    }
    return $contributors;
}

/**
 * @param Client $client
 * @param array $authHeaders
 * @param string $repository
 * @return array
 */
function fetchRepositoryContributors(
    Client $client,
    array $authHeaders,
    string $repository
) {
    $contributors = [];
    $requestUri = str_replace('{repository}', $repository, GITHUB_CONTRIBUTORS_POINT);
    $response = $client->get($requestUri, $authHeaders);
    if ($response->getStatusCode() !== 200) {
        return $contributors;
    }
    if ($response->hasHeader('Link')) {
        $headerValue = $response->getHeader('Link')[0];
        preg_match(REGEX, $headerValue, $matches);
        $nbPages = $matches[1];
    } else {
        $nbPages = 1;
    }

    for ($i = 1; $i <= $nbPages; $i++) {
        $response = $client->get($requestUri . '?page=' . $i, $authHeaders);
        $contributors = array_merge(
            $contributors,
            json_decode($response->getBody(), true)
        );
    }
    return $contributors;
}

/**
 * @param string $file
 * @return array
 */
function fetchConfiguration(string $file): array {
    if (empty($file)) {
        return [];
    }
    if (!file_exists($file) || !is_readable($file)) {
        throw new RuntimeException(sprintf('File "%s" doesn\'t exist or is not readable', $file));
    }
    $config = Yaml::parse(file_get_contents($file))['config'] ?? [];

    return [
        $config['exclusions'] ?? [],
        $config['keepExcludedUsers'] ?? false,
        $config['extractEmailDomain'] ?? false,
        $config['fieldsWhitelist'] ? array_flip($config['fieldsWhitelist']) : [],
        $config['excludeRepositories'] ?? [],
    ];
}

(new Application('traces', '5.2.1'))
    ->register('traces')
    ->setDescription('A simple CLI tool to generate information about GitHub contributors of an organization.')
    ->addOption('user', 'u', InputOption::VALUE_REQUIRED, 'GitHub username, for instance `johndoe`')
    ->addOption('password', 'p', InputOption::VALUE_OPTIONAL, 'GitHub password, for instance `secr3tSt0rY`', '')
    ->addOption('organization', 'o',InputOption::VALUE_OPTIONAL, 'GitHub organization')
    ->addOption('repository', 'r', InputOption::VALUE_OPTIONAL, 'GitHub repository')
    ->addOption('config', 'c', InputOption::VALUE_REQUIRED, 'Configuration file, for exclusions')
    ->addOption('timeout', 't', InputOption::VALUE_REQUIRED, 'Request timeout, in seconds', 2.0)
    ->setCode(
        function (InputInterface $input, OutputInterface $output) {
            $io = new SymfonyStyle($input, $output);

            $user = $input->getOption('user');
            $password = $input->getOption('password');
            $organization = $input->getOption('organization');
            $repository = $input->getOption('repository');
            $configFile = $input->getOption('config');
            $timeout = $input->getOption('timeout');

            if (empty($organization) && empty($repository)) {
                $io->warning('Please define organization (-o/--organization) or repository (-r/--repository) option');
                return;
            }

            // load settings from configuration file
            list(
                $confExclusions,
                $confKeepExcludedUsers,
                $confExtractEmailDomain,
                $confFieldsWhitelist,
                $confExcludeRepositories
            ) = fetchConfiguration($configFile);

            $authHeaders = ['auth' => [$user, $password]];
            $client = new Client(['timeout' => $timeout,]);

            if (!empty($repository)) {
                $orgRepositories = [$repository];
            } else {
                $io->text('Loading repositories...');
                $orgRepositories = fetchOrganizationRepositories(
                    $io,
                    $client,
                    $authHeaders,
                    $confExcludeRepositories,
                    $organization
                );
            }

            $io->text('Loading contributors...');

            $users = [];
            $categories = [];
            foreach (REPOSITORIES_CATEGORIES as $section => $repositories) {
                $categories[$section] = [
                    'total' => 0,
                    'repositories' => [],
                ];
                foreach ($repositories as $repository) {
                    $categories[$section]['repositories'][$repository] = 0;
                }
            }
            $io->progressStart(count($orgRepositories));
            foreach ($orgRepositories as $repository) {
                $section = array_reduce(array_keys(REPOSITORIES_CATEGORIES), function($carry, $item) use ($repository) {
                    return in_array($repository, REPOSITORIES_CATEGORIES[$item]) ? $item : $carry;
                }, 'others');

                $contributors = fetchRepositoryPulls($client, $authHeaders, $repository);
                foreach ($contributors as $contributor) {
                    $keyUsers = $contributor['login'];
                    // skip user if excluded
                    if (!$confKeepExcludedUsers && in_array($keyUsers, $confExclusions, true)) {
                        continue;
                    }
                    if (!array_key_exists($keyUsers, $users)) {
                        $userRequestUri = str_replace('{login}', $keyUsers, GITHUB_USERS_POINT);
                        $response = $client->get($userRequestUri, $authHeaders);
                        $user = json_decode($response->getBody(), true);
                        $userEmail = $user['email'];

                        // Clean up response if whitelist is defined
                        if (!empty($confFieldsWhitelist)) {
                            $user = array_intersect_key($user, $confFieldsWhitelist);
                        }

                        // Add mail domain if setting enabled
                        if ($confExtractEmailDomain) {
                            $user['email_domain'] = empty($userEmail)
                                ? ''
                                : substr($userEmail, strpos($userEmail, '@') + 1);
                        }

                        // add exclusion property if setting enabled
                        if ($confKeepExcludedUsers) {
                            $user['excluded'] = in_array($keyUsers, $confExclusions, true);
                        }

                        $user['contributions'] = 0;
                        $user['repositories'] = [];
                        $user['categories'] = $categories;

                        $users[$keyUsers] = $user;
                    }
                    $users[$keyUsers]['contributions'] += $contributor['contributions'];
                    $users[$keyUsers]['repositories'][$repository] = $contributor['contributions'];
                    $users[$keyUsers]['categories'][$section]['total'] += $contributor['contributions'];
                    if(!array_key_exists($repository, $users[$keyUsers]['categories'][$section]['repositories'])) {
                        $users[$keyUsers]['categories'][$section]['repositories'][$repository] = 0;
                    }
                    $users[$keyUsers]['categories'][$section]['repositories'][$repository] += $contributor['contributions'];
                }
                $io->progressAdvance();
            }
            $io->progressFinish();

            if (!empty($organization)) {
                $io->success(sprintf('%s contributors found for the organization "%s".', count($users), $organization));
            } else {
                $io->success(sprintf('%s contributors found for the repository "%s".', count($users), $repository));
            }

            // Clean
            foreach ($users as &$user) {
                foreach ($user['categories'] as $keySection => $section) {
                    foreach ($section['repositories'] as $repository => $count) {
                        if ($count == 0) {
                            unset($user['categories'][$keySection]['repositories'][$repository]);
                        }
                    }
                }
            }

            usort($users, function($userA, $userB) {
                if ($userA['contributions'] == $userB['contributions']) {
                    return 0;
                }
                return ($userA['contributions'] > $userB['contributions']) ? -1 : 1;
            });
            $users['updatedAt'] = date('Y-m-d H:i:s');

            $io->text('Writing to file...');
            $fs = new Filesystem();
            $fs->dumpFile('contributors.js', json_encode($users, JSON_PRETTY_PRINT));
        }
    )
    ->getApplication()
    ->setDefaultCommand('traces', true)
    ->run();
